# -*- coding: utf-8 -*-
"""Personal Astrology Web App (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) - OpenRouter + PDF Export
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
"""

import streamlit as st
import datetime
import json
import os
import requests
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

try:
    import swisseph as swe
    HAS_SWISS = True
except Exception:
    HAS_SWISS = False


def to_julian_day(dt: datetime.datetime) -> float:
    utc = dt.astimezone(datetime.timezone.utc)
    y, m = utc.year, utc.month
    d = utc.day + utc.hour/24 + utc.minute/1440 + utc.second/86400
    if m <= 2:
        y -= 1
        m += 12
    A = y // 100
    B = 2 - A + (A // 4)
    return int(365.25*(y+4716)) + int(30.6001*(m+1)) + d + B - 1524.5


def calc_western_planets(jd):
    if not HAS_SWISS:
        return {"Sun": jd % 360, "Note": "pyswisseph not installed"}
    swe.set_ephe_path('.')
    planets = ['Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Uranus','Neptune','Pluto']
    result = {}
    for i, p in enumerate(planets):
        try:
            lon = swe.calc_ut(jd, i)[0][0]
        except Exception:
            lon = None
        result[p] = lon
    return result


def chinese_zodiac(year: int):
    animals = ['‡∏´‡∏ô‡∏π','‡∏ß‡∏±‡∏ß','‡πÄ‡∏™‡∏∑‡∏≠','‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢','‡∏°‡∏±‡∏á‡∏Å‡∏£','‡∏á‡∏π','‡∏°‡πâ‡∏≤','‡πÅ‡∏û‡∏∞','‡∏•‡∏¥‡∏á','‡πÑ‡∏Å‡πà','‡∏™‡∏∏‡∏ô‡∏±‡∏Ç','‡∏´‡∏°‡∏π']
    elements = ['‡πÑ‡∏°‡πâ','‡πÑ‡∏ü','‡∏î‡∏¥‡∏ô','‡∏ó‡∏≠‡∏á','‡∏ô‡πâ‡∏≥']
    elem = elements[((year - 4) % 10)//2]
    animal = animals[(year - 4) % 12]
    return f"{elem} {animal}"


def thai_lunar(day: int):
    tithi = ((day - 1) % 30) + 1
    phase = '‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô' if tithi <= 15 else '‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏°'
    return {"‡∏î‡∏¥‡∏ñ‡∏µ": tithi, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": phase}


def ai_interpretation(prompt: str) -> str:
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        return "[AI Error] OPENROUTER_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô environment ‡∏´‡∏£‡∏∑‡∏≠ Streamlit secrets."

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 800
    }
    try:
        resp = requests.post(url, headers=headers, json=body, timeout=60)
        resp.raise_for_status()
        data = resp.json()
        content = data["choices"][0]["message"]["content"]
        return content.strip()
    except Exception as e:
        return f"[AI Error] {e}"


def generate_pdf(name, dt, lat, lon, western, zodiac, thai, target_year_p, ai_text):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, height-50, f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {name}")

    c.setFont("Helvetica", 11)
    c.drawString(50, height-80, f"‡πÄ‡∏Å‡∏¥‡∏î: {dt}  (‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {lat}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lon})")
    c.drawString(50, height-100, f"‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {target_year_p}")

    c.drawString(50, height-130, f"‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£: {zodiac}")
    c.drawString(50, height-150, f"‡πÑ‡∏ó‡∏¢ (‡∏î‡∏¥‡∏ñ‡∏µ): {thai}")

    c.drawString(50, height-180, "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏≤‡∏ß (approx):")
    y = height-200
    for k, v in western.items():
        line = f"{k}: {v}"
        c.drawString(60, y, line[:100])
        y -= 14
        if y < 80:
            c.showPage()
            y = height-80

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y-10, "‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å AI:")
    text_obj = c.beginText(60, y-30)
    text_obj.setFont("Helvetica", 11)
    for line in ai_text.split("\n"):
        text_obj.textLine(line)
        if text_obj.getY() < 50:
            c.drawText(text_obj)
            c.showPage()
            text_obj = c.beginText(60, height-80)
            text_obj.setFont("Helvetica", 11)
    c.drawText(text_obj)

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer


st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", layout="wide")
st.title("üîÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (‡πÑ‡∏ó‡∏¢ + ‡∏à‡∏µ‡∏ô + ‡∏™‡∏≤‡∏Å‡∏•)")
st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 2569)")

with st.form("birth_form"):
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value="‡∏ß‡∏ì‡∏¥‡∏ä ‡∏≠‡∏¥‡∏á‡∏Ñ‡∏∞‡∏ß‡∏ì‡∏¥‡∏ä")
    birth_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", value=datetime.date(1973,1,7))
    birth_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ)", value=datetime.time(6,11))
    lat = st.number_input("‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î", value=13.752555, format="%.6f")
    lon = st.number_input("‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î", value=100.494066, format="%.6f")
    target_year_p = st.number_input("‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", min_value=2400, max_value=3000, value=2569)
    submitted = st.form_submit_button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF")

if submitted:
    # Convert ‡∏û.‡∏®. to ‡∏Ñ.‡∏®.
    target_year_ad = int(target_year_p) - 543
    tz = datetime.timezone(datetime.timedelta(hours=7))
    dt = datetime.datetime.combine(birth_date, birth_time, tzinfo=tz)
    jd = to_julian_day(dt)

    western = calc_western_planets(jd)
    zodiac = chinese_zodiac(birth_date.year)
    thai = thai_lunar(birth_date.day)

    # Build Thai prompt for AI with target ‡∏û.‡∏®.
    prompt = f\"\"\"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢ ‡∏à‡∏µ‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Å‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢):
- ‡∏ä‡∏∑‡πà‡∏≠: {name}
- ‡πÄ‡∏Å‡∏¥‡∏î: {birth_date} ‡πÄ‡∏ß‡∏•‡∏≤ {birth_time} (Bangkok, UTC+7)
- ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î/‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lat}, {lon}
- ‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {target_year_p} (‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ.‡∏®. {target_year_ad})
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠: ‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£: {zodiac} ; ‡πÑ‡∏ó‡∏¢: {thai} ; ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏≤‡∏ß‡πÇ‡∏î‡∏¢‡∏Ñ‡∏£‡πà‡∏≤‡∏ß: {western}

‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠):
1) ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ {target_year_p}
2) ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†
3) ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
4) ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠ / ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á (‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á)
‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
\"\"\"

    st.subheader("üî≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ")
    st.json({"Western": western, "Chinese": zodiac, "Thai": thai, "‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢": target_year_p})

    st.subheader("ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢ AI (OpenRouter)")
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ OpenRouter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢..."):
        ai_text = ai_interpretation(prompt)
    st.write(ai_text or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å AI")

    pdf_buf = generate_pdf(name, dt, lat, lon, western, zodiac, thai, target_year_p, ai_text)
    st.download_button(
        label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)" ,
        data=pdf_buf,
        file_name=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡∏ß‡∏á_{name.replace(' ','_')}_{target_year_p}.pdf",
        mime="application/pdf"
    )
