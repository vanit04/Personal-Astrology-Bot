# -*- coding: utf-8 -*-
"""Personal Astrology Web App - Pro
Features:
- Thai UI
- User specifies target year (‡∏û.‡∏®.)
- AI (OpenRouter) generates
  * per-system analyses (Thai, Chinese, Western)
  * month-by-month forecasts for the whole year
  * synthesized annual summary combining the three systems
- PDF export
"""

import streamlit as st
import datetime, json, os, requests
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

try:
    import swisseph as swe
    HAS_SWISS = True
except Exception:
    HAS_SWISS = False

def to_julian_day(dt: datetime.datetime) -> float:
    utc = dt.astimezone(datetime.timezone.utc)
    y, m = utc.year, utc.month
    d = utc.day + utc.hour/24 + utc.minute/1440 + utc.second/86400
    if m <= 2:
        y -= 1
        m += 12
    A = y // 100
    B = 2 - A + (A // 4)
    return int(365.25*(y+4716)) + int(30.6001*(m+1)) + d + B - 1524.5

def calc_western_planets(jd):
    if not HAS_SWISS:
        return {"Sun": round(jd % 360, 2), "Note": "pyswisseph not installed"}
    swe.set_ephe_path('.')
    planets = ['Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Uranus','Neptune','Pluto']
    result = {}
    for i, p in enumerate(planets):
        try:
            lon = swe.calc_ut(jd, i)[0][0]
        except Exception:
            lon = None
        result[p] = round(lon,2) if lon is not None else None
    return result

def chinese_zodiac(year: int):
    animals = ['‡∏´‡∏ô‡∏π','‡∏ß‡∏±‡∏ß','‡πÄ‡∏™‡∏∑‡∏≠','‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢','‡∏°‡∏±‡∏á‡∏Å‡∏£','‡∏á‡∏π','‡∏°‡πâ‡∏≤','‡πÅ‡∏û‡∏∞','‡∏•‡∏¥‡∏á','‡πÑ‡∏Å‡πà','‡∏™‡∏∏‡∏ô‡∏±‡∏Ç','‡∏´‡∏°‡∏π']
    elements = ['‡πÑ‡∏°‡πâ','‡πÑ‡∏ü','‡∏î‡∏¥‡∏ô','‡∏ó‡∏≠‡∏á','‡∏ô‡πâ‡∏≥']
    elem = elements[((year - 4) % 10)//2]
    animal = animals[(year - 4) % 12]
    return f"{elem} {animal}"

def thai_lunar(day: int):
    tithi = ((day - 1) % 30) + 1
    phase = '‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô' if tithi <= 15 else '‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏°'
    return {"‡∏î‡∏¥‡∏ñ‡∏µ": tithi, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": phase}

def ai_interpretation_openrouter(prompt: str) -> str:
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        return "[AI Error] OPENROUTER_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á environment ‡∏´‡∏£‡∏∑‡∏≠ Streamlit secrets."
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    body = {"model":"openai/gpt-3.5-turbo", "messages":[{"role":"user","content":prompt}], "temperature":0.6, "max_tokens":1500}
    try:
        resp = requests.post(url, headers=headers, json=body, timeout=120)
        resp.raise_for_status()
        data = resp.json()
        content = data["choices"][0]["message"]["content"]
        return content.strip()
    except Exception as e:
        return f"[AI Error] {e}"

def generate_pdf(name, birth_dt_str, lat, lon, zodiac, thai_info, western, target_year_p, ai_text):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    x_margin = 50

    c.setFont("Helvetica-Bold", 16)
    c.drawString(x_margin, height-50, f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•: {name}")

    c.setFont("Helvetica", 11)
    c.drawString(x_margin, height-80, f"‡πÄ‡∏Å‡∏¥‡∏î: {birth_dt_str}  (‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {lat}, ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {lon})")
    c.drawString(x_margin, height-100, f"‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {target_year_p}")
    c.drawString(x_margin, height-120, f"‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£: {zodiac}   |   ‡πÑ‡∏ó‡∏¢ (‡∏î‡∏¥‡∏ñ‡∏µ): {thai_info}")

    c.drawString(x_margin, height-150, "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏≤‡∏ß (approx):")
    y = height-170
    for k, v in western.items():
        line = f"{k}: {v}"
        c.drawString(x_margin+10, y, line[:100])
        y -= 14
        if y < 80:
            c.showPage()
            y = height-80

    c.setFont("Helvetica-Bold", 12)
    c.drawString(x_margin, y-10, "‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (AI):")
    text_obj = c.beginText(x_margin+10, y-30)
    text_obj.setFont("Helvetica", 11)
    for line in ai_text.split("\n"):
        text_obj.textLine(line)
        if text_obj.getY() < 50:
            c.drawText(text_obj)
            c.showPage()
            text_obj = c.beginText(x_margin+10, height-80)
            text_obj.setFont("Helvetica", 11)
    c.drawText(text_obj)

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# Streamlit UI (Thai)
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤ (Pro)", layout="wide")
st.title("üîÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (Pro)")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå: ‡πÑ‡∏ó‡∏¢, ‡∏à‡∏µ‡∏ô, ‡∏™‡∏≤‡∏Å‡∏• ‚Äî ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")

with st.form("form"):
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value="‡∏ß‡∏ì‡∏¥‡∏ä ‡∏≠‡∏¥‡∏á‡∏Ñ‡∏∞‡∏ß‡∏ì‡∏¥‡∏ä")
    birth_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", value=datetime.date(1973,1,7))
    birth_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î", value=datetime.time(6,11))
    lat = st.number_input("‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î", value=13.752555, format="%.6f")
    lon = st.number_input("‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î", value=100.494066, format="%.6f")
    target_year_p = st.number_input("‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", min_value=2400, max_value=3000, value=2569)
    submitted = st.form_submit_button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF")

if submitted:
    target_year_ad = int(target_year_p) - 543
    tz = datetime.timezone(datetime.timedelta(hours=7))
    birth_dt = datetime.datetime.combine(birth_date, birth_time, tzinfo=tz)
    birth_dt_str = birth_dt.strftime("%Y-%m-%d %H:%M:%S %Z")
    jd = to_julian_day(birth_dt)
    western = calc_western_planets(jd)
    zodiac = chinese_zodiac(birth_date.year)
    thai_info = thai_lunar(birth_date.day)

    # Build detailed prompt asking per-system analysis + monthly forecasts
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç 3 ‡∏£‡∏∞‡∏ö‡∏ö:
1. ‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢ (‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß, ‡∏£‡∏≤‡∏´‡∏π‚Äì‡πÄ‡∏Å‡∏ï‡∏∏, ‡∏î‡∏¥‡∏ñ‡∏µ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏Ñ‡∏ï‡∏¥)
2. ‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏à‡∏µ‡∏ô (‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£, ‡∏ò‡∏≤‡∏ï‡∏∏, ‡∏Æ‡∏ß‡∏á‡∏à‡∏∏‡πâ‡∏¢, ‡∏õ‡∏µ‡∏ä‡∏á, ‡∏î‡∏ß‡∏á 4 ‡πÄ‡∏™‡∏≤)
3. ‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏≤‡∏Å‡∏• (Western Astrology: Sun/Moon/Ascendant, Transits)

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á:
- ‡∏ä‡∏∑‡πà‡∏≠: {name}
- ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {birth_date} ‡πÄ‡∏ß‡∏•‡∏≤ {birth_time} (‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ UTC+7)
- ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {lat}, {lon}
- ‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {target_year_p} (‡∏Ñ.‡∏®. {target_year_ad})

‡∏à‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏î‡∏¢:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡πÑ‡∏ó‡∏¢, ‡∏à‡∏µ‡∏ô, ‡∏™‡∏≤‡∏Å‡∏•)
2. ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°‚Äì‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° {target_year_p})
   - ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡πà‡∏ô
   - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†
   - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
3. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå:
   - ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
   - ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
   - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå

‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
"""

    st.subheader("üî≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ (‡∏™‡∏£‡∏∏‡∏õ)")
    st.json({"Western": western, "Chinese": zodiac, "Thai": thai_info, "‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢": target_year_p})

    st.subheader("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á OpenRouter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠)")
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI..."):
        ai_text = ai_interpretation_openrouter(prompt)

    st.subheader("üìú ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (AI)")
    st.write(ai_text)

    pdf_buf = generate_pdf(name, birth_dt_str, lat, lon, zodiac, thai_info, western, target_year_p, ai_text)
    st.download_button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)", data=pdf_buf, file_name=f"‡∏î‡∏ß‡∏á_{name.replace(' ','_')}_{target_year_p}.pdf", mime="application/pdf")
