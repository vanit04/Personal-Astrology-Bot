"""
Personal Astrology Web App (Thai + Chinese + Western + AI-assisted + PDF Export)
Filename: personal_astrology_webapp.py
Purpose: Web GUI for personalized astrology analysis integrating Thai, Chinese,
and Western systems, with AI interpretation and PDF export.

Features:
 1. Streamlit GUI input (name, birthdate, etc.)
 2. Computes astrological data (Western, Chinese Zodiac, Thai lunar)
 3. Calls free AI (Hugging Face Flan-T5) for interpretive text
 4. Exports personalized report to PDF
 5. Provides .bat launcher for convenience

Install:
  pip install streamlit pyswisseph requests reportlab

Run:
  streamlit run personal_astrology_webapp.py

Author: Generated by ChatGPT
"""

import streamlit as st
import datetime
import requests
import json
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from io import BytesIO

# Optional astro libs
try:
    import swisseph as swe
    HAS_SWISS = True
except Exception:
    HAS_SWISS = False

# ----------------------------- Utility helpers -----------------------------

def to_julian_day(dt: datetime.datetime) -> float:
    utc = dt.astimezone(datetime.timezone.utc)
    y, m = utc.year, utc.month
    d = utc.day + utc.hour/24 + utc.minute/1440 + utc.second/86400
    if m <= 2:
        y -= 1
        m += 12
    A = y // 100
    B = 2 - A + (A // 4)
    return int(365.25*(y+4716)) + int(30.6001*(m+1)) + d + B - 1524.5

# ----------------------------- Astro calculations -----------------------------

def calc_western_planets(jd):
    if not HAS_SWISS:
        return {"Sun": jd % 360, "Note": "pyswisseph not installed"}
    swe.set_ephe_path('.')
    planets = ['Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Uranus','Neptune','Pluto']
    result = {}
    for i, p in enumerate(planets):
        try:
            lon = swe.calc_ut(jd, i)[0][0]
        except Exception:
            lon = None
        result[p] = lon
    return result

# ----------------------------- Chinese Zodiac -----------------------------

def chinese_zodiac(year: int):
    animals = ['Rat','Ox','Tiger','Rabbit','Dragon','Snake','Horse','Goat','Monkey','Rooster','Dog','Pig']
    elements = ['Wood','Fire','Earth','Metal','Water']
    elem = elements[((year - 4) % 10)//2]
    animal = animals[(year - 4) % 12]
    return f"{elem} {animal}"

# ----------------------------- Thai lunar (simplified) -----------------------------

def thai_lunar(day: int):
    tithi = ((day - 1) % 30) + 1
    phase = 'Waxing' if tithi <= 15 else 'Waning'
    return {"tithi": tithi, "phase": phase}

# ----------------------------- AI Assistant -----------------------------

def ai_interpretation(prompt: str) -> str:
    try:
        api_url = "https://api-inference.huggingface.co/models/google/flan-t5-base"
        headers = {"Content-Type": "application/json"}
        payload = json.dumps({"inputs": prompt})
        resp = requests.post(api_url, headers=headers, data=payload, timeout=30)
        if resp.status_code == 200:
            data = resp.json()
            if isinstance(data, list) and len(data)>0:
                return data[0].get('generated_text','')
            return str(data)
        else:
            return f"[AI Error {resp.status_code}]"
    except Exception as e:
        return f"[AI Error] {e}"

# ----------------------------- PDF Export -----------------------------

def generate_pdf(name, dt, lat, lon, western, zodiac, thai, ai_text):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height-50, f"Astrological Report for {name}")

    c.setFont("Helvetica", 11)
    c.drawString(50, height-80, f"Born: {dt}  (Lat: {lat}, Lon: {lon})")

    c.drawString(50, height-110, f"Chinese Zodiac: {zodiac}")
    c.drawString(50, height-130, f"Thai Lunar: {thai}")

    c.drawString(50, height-160, "Western Planets:")
    y = height-180
    for k, v in western.items():
        c.drawString(60, y, f"{k}: {v}")
        y -= 15

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y-10, "AI Interpretation:")

    text_obj = c.beginText(60, y-30)
    text_obj.setFont("Helvetica", 11)
    for line in ai_text.split('\n'):
        text_obj.textLine(line)
    c.drawText(text_obj)

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# ----------------------------- Streamlit Web UI -----------------------------

def main():
    st.title("ðŸ”® Personal Astrology Web App (with AI & PDF Export)")
    st.markdown("Analyze your birth chart and export a PDF report.")

    name = st.text_input("Name", value="à¸§à¸“à¸´à¸Š à¸­à¸´à¸‡à¸„à¸°à¸§à¸“à¸´à¸Š")
    birth_date = st.date_input("Birth Date", value=datetime.date(1973,1,7))
    birth_time = st.time_input("Birth Time", value=datetime.time(6,11))
    lat = st.number_input("Latitude", value=13.752555)
    lon = st.number_input("Longitude", value=100.494066)

    if st.button("Analyze & Generate Report"):
        tz = datetime.timezone(datetime.timedelta(hours=7))
        dt = datetime.datetime.combine(birth_date, birth_time, tzinfo=tz)
        jd = to_julian_day(dt)
        western = calc_western_planets(jd)
        zodiac = chinese_zodiac(birth_date.year)
        thai = thai_lunar(birth_date.day)

        summary = (
            f"Name: {name}\nBorn: {dt}\nLat/Lon: {lat},{lon}\n"
            f"Western: {json.dumps(western)}\nChinese: {zodiac}\nThai: {thai}\n"
            "Predict key personality traits and year 2025â€“2026 outlook."
        )

        st.subheader("ðŸ”­ Computed Data")
        st.json({"Western": western, "Chinese": zodiac, "Thai": thai})

        st.subheader("ðŸ¤– AI Interpretation")
        with st.spinner("Contacting AI model..."):
            ai_text = ai_interpretation(summary)
        st.write(ai_text or "No interpretation generated.")

        # Generate PDF
        pdf_buf = generate_pdf(name, dt, lat, lon, western, zodiac, thai, ai_text)
        st.download_button(
            label="ðŸ“„ Download PDF Report",
            data=pdf_buf,
            file_name=f"Astrology_Report_{name}.pdf",
            mime="application/pdf"
        )

if __name__ == '__main__':
    main()

# ----------------------------- Windows Batch Launcher -----------------------------
# Save the following as run_astrology_bot.bat in same directory:
#
# @echo off
# echo Launching Personal Astrology Web App...
# python -m streamlit run personal_astrology_webapp.py
# pause
